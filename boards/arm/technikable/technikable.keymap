/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BAS_L 0
#define CMD_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
                       &ortho_transform;
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <CMD_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    behaviors {
        ht_tp: holdtap_tapreferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp LGUI   &kp LALT   &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &ht_tp SQT I       &ht_tp DQT O      &none       &kp BSPC
 &kp Q      &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp ENTER     &kp P
 &kp LCTRL  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp SLASH     &none
                       &none      &kp LCTRL  &kp LSHFT      &mo CMD_L       &kp SPACE        &none    &kp RSHFT   &none
            >;
        };

        cmd_layer {
            label = "Cmd";
            bindings = <
&kp LG(W)     &none     &kp LG(S)     &kp LG(LS(P))      &kp LG(R)          &kp LG(T)       &kp CARET     &kp AMPS         &kp LPAR      &kp RPAR     &none     &kp LG(BSPC)
&kp LG(TAB)     &kp LG(A)     &kp TAB     &kp LG(F)      &kp ESC          &kp LG(K)       &kp ASTRK     &kp LC(H)       &ht_tp UNDER MINUS   &ht_tp EQUAL PLUS   &kp COLON   &kp SEMI
&trans     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)    &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV    &trans         &trans       &trans       &trans     &trans
&trans     &kp MINUS  &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT    &trans         &trans       &trans       &trans     &trans
&trans     &kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans        &trans         &trans       &trans       &trans     &trans
                     &trans     &kp N0      &trans    &none         &none     &kp ESC        &kp DEL      &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans     &trans    &trans       &trans       &trans     &trans
                      &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

    };
};


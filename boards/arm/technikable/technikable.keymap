/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define OH_L 1
#define CMD_L 2
#define NAV_L 3
#define NUM_L 4
#define BLUE_L 5
#define WIN_L 6


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &technikable_dual_2u_layout;
#elif defined(TBLE_MIT)
                       &technikable_mit_layout;
#else
                       &technikable_ortho_layout;
#endif
    };
    behaviors {
        ht_hp: holdtap_tapreferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
            if-layers = <CMD_L NAV_L>;
            then-layer = <WIN_L>;
      };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
    &none      &none  &kp W           &kp E         &kp R         &kp T       &kp Y   &kp U          &kp I         &kp O           &none     &none
    &kp Q           &kp A   &ht_hp LALT S   &ht_hp LGUI D &ht_hp LCTRL F &kp G       &kp H   &ht_hp LCTRL J  &ht_hp LGUI K &ht_hp LALT L   &kp P      &kp RSHIFT
    &kp CAPS   &kp Z   &kp X           &kp C         &kp V         &kp B       &kp N   &kp M          &kp COMMA      &kp DOT         &kp SQT   &none
                                            &none &mo NUM_L     &kp LSHFT      &mo CMD_L   &kp SPACE &mo NAV_L      &none &mo BLUE_L
            >;
        };

    one_hand_layer {
      label = "OneHand";
      bindings = <
      &none &none &none    &none &none &none &none &none      &none      &none      &none          &none
      &none &none &none    &none &none &none &none &kp LG(U) &kp UP      &kp LG(O) &none          &none
      &none &none &none    &none &none &none &none &kp LEFT    &kp DOWN    KC_RIGHT,   &kp LG(BSPC)  &none
      &none &none &trans &kp SPACE &trans &none &mo BLUE_L
            >;
    };
        left_cmd_layer {
            label = "Cmd";
            bindings = <
    &kp LC(LG(Q))   &none        &kp LG(LS(Z))   &kp LG(W)   &kp LG(R)     &kp LG(T)     &kp CARET            &kp AMPS      &kp LPAR            &kp RPAR        &none    &none
    &kp LG(TAB)       &kp LG(A)   &kp TAB             &none    &kp ESC         &kp LG(F)     &kp ASTRK            &kp BSPC      &kp LC(X)         &kp MINUS       &kp COLON  &kp RSHIFT
    &kp LS(TAB)       &kp LG(Z)   &kp LG(X)         &kp LC(C)   &kp LG(C)     &kp LG(V)     &kp LA(LG(V))   &kp LBKT      &kp RBKT            &kp UNDER &kp SEMI  &none
                                                          &none        &none          &none          &kp ENTER &mo NAV_L     &none &none
            >;
        };

        right_nav_layer {
            label = "Nav";
            bindings = <
     &none             &none          &none              &kp LBRC        &kp RBRC    &none      &kp LG(GRAVE)       &none      &kp UP      &kp EQUAL     &none      &none
     &none             &none          &kp LS(LC(TAB)) &kp LC(TAB)   &kp DOLLAR     &kp PRCNT    &kp LS(LG(C))   &kp LEFT    &kp DOWN    &kp RIGHT      &kp LG(Y) &kp LG(BSPC)
     &kp LG(LS(T))  &kp EXCL        &kp AT              &kp HASH        &kp TILDE    &kp GRAVE     &kp LS(LG(N))   &kp BSLH    &none &kp SLASH     &none      &none
                                                      &none      &none          &kp LSHFT    &mo CMD_L   &none &none      &none &none
            >;
        };

        left_num_layer {
            label = "Num";
            bindings = <

      &kp LG(BSPC)  &none    &none                   &none          &none              &none          &kp N7 &kp N8   &kp N9 &none   &kp K_MUTE
      &none  &none    &kp LG(BSPC)  &kp LC(LG(LS(N4)))   &kp LG(RBKT)  &kp LS(LG(G))   &kp PG_UP        &kp N4 &kp N5   &kp N6 &kp DOT  &kp K_VOLUME_UP
      &none  &none    &none          &kp LG(LS(N4))         &none          &none              &kp PG_DN        &kp N1 &kp N2   &kp N3 &none   &kp K_VOLUME_DOWN
                                      &none  &none                    &none          &none              &kp LS(ENTER)   &kp N0 &none &none
            >;
        };

        bluetooth_layer {
            label = "Bluetooth";
            bindings = <
            &none         &none         &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &none &none &none &none &none &none &none
            &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none &none &none &none &none &none &none
            &none         &none         &none         &none         &none         &none &none &none &none &none &none &none
                                        &none         &none         &none         &none &none &none &none &none
            >;
        };
        window_layer {
            label = "WindowManagement";
            bindings = <
      &kp LS(LA(Z))     &none                  &none                  &kp LA(LS(L))       &kp LA(LS(H))       &none                  &none          &kp LG(U)         &kp LG(I)         &kp LG(O)         &none  &none
      &kp LS(LA(M))     &kp LC(N1)             &kp LC(N2)             &kp LC(N3)             &kp LC(N4)             &kp LA(LS(SPACE))     &none          &kp LA(LS(J))   &kp LA(LS(ENTER)) &kp LA(LS(K))   &none  &kp LS(LA(M))
      &none                &kp LC(LS(LA(N1))) &kp LC(LS(LA(N2))) &kp LC(LS(LA(N3))) &kp LC(LS(LA(N4))) &kp LA(LS(T))       &none          &none              &none              &none              &none  &none
                                               &none                             &none                  &none &none                  &none          &none &none &none
            >;
        };

    };
};

